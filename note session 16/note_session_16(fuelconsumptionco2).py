# -*- coding: utf-8 -*-
"""note_session_16(FuelConsumptionCo2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hNdqv2mAZWFS11AFqA3NP65gwg5HpfBK
"""

import numpy as np
import pandas as pd

data = pd.read_csv('FuelConsumptionCo2.csv')
data.info()

data.head()

# هنعمل تحويل للداتا غير الرقمية إلى رقمية 
from sklearn import preprocessing
le = preprocessing.LabelEncoder()
data = data.apply(le.fit_transform)

data.head()

x = data.drop(['CO2EMISSIONS'],axis=1)
y = data['CO2EMISSIONS']
xx = np.array(x)
yy= np.array(y)

"""split data"""

from sklearn.model_selection import train_test_split
x_train , x_test, y_train,y_test =train_test_split(xx,yy,test_size=33,random_state=100)

"""train randomforest"""

from sklearn.ensemble import RandomForestRegressor
regressor = RandomForestRegressor()
regressor.fit(x_train,y_train)

"""Evalute model 

هنقيس الايرور بتاعنا بكذا طريقة اللي اتشرحت
"""

from sklearn import metrics
y_pred = regressor.predict(x_test)
y_test 
print('MAE: ',metrics.mean_absolute_error(y_test,y_pred))
print('MSE: ',metrics.mean_squared_error(y_test,y_pred))
print('RMSE: ',np.sqrt(metrics.mean_squared_error(y_test,y_pred)))
print('R² Score: ',metrics.r2_score(y_test,y_pred))
print('MAPE: ',metrics.mean_absolute_percentage_error(y_test,y_pred))
mape = metrics.mean_absolute_percentage_error(y_test,y_pred)
print('MAPE: ',round(mape*100,2),'%')

"""visualize random forest"""

import matplotlib.pyplot as plt
from sklearn import tree
import graphviz
#Dot data
i_tree = 0
for tree_in_forest in regressor.estimators_:

    dot_data = tree.export_graphviz(tree_in_forest, out_file = None,
                                  feature_names=x.columns,
                                  filled=True,rounded=True)
  
#Draw graph
    graph = graphviz.Source(dot_data,format='png')
    graph

graph.render('tree',format='png',view=True)

"""extract important features"""

columns_name= ['MODELYEAR', 'Brands', 'VEHICLECLASS', 'ENGINESIZE', 'CYLINDERS',
        'TRANSMISSION', 'FUELTYPE', 'FUELCONSUMPTION_CITY',
        'FUELCONSUMPTION_HWY', 'FUELCONSUMPTION_COMB',
        'FUELCONSUMPTION_COMB_MPG']
features = columns_name
importance = regressor.feature_importances_
indices = np.argsort(importance)
plt.barh(range(len(indices)),importance[indices],color='c',align='center')
plt.yticks(range(len(indices)),[features[i] for i in indices])
plt.show()

"""cross validation"""

from sklearn.model_selection import KFold, cross_val_score
cv = KFold(n_splits=25,random_state=1,shuffle=True)
scores = cross_val_score(regressor,x,y,scoring = "neg_mean_squared_error",cv=cv,n_jobs=-1)
avg = np.mean(np.absolute(scores))
print("neg_mean_squared_error",avg)

