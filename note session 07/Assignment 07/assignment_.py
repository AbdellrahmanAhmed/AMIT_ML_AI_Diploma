# -*- coding: utf-8 -*-
"""assignment .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q-UNTxsE-Q7YoHtKjoyDFPh7zKEEEqps

# NumPy Exercises

#### Import NumPy as np
"""

import numpy as np

"""#### Create an array of 10 zeros """

z = np.zeros((1, 10))
print(z)

"""#### Create an array of 10 ones"""

o = np.ones((1, 10))
print(o)

"""#### Create an array of 10 fives"""

f = np.array([[5,5,5,5,5,5,5,5,5,5]])
print(f)

"""#### Create an array of the integers from 10 to 50"""

ar = np.arange(1,51)
print(ar)

"""#### Create an array of all the even integers from 10 to 50"""

ev = np.arange(10,51,2)
print(ev)

"""#### Create a 3x3 matrix with values ranging from 0 to 8"""

m = np.arange(9).reshape(3,3)
print(m)

"""#### Create a 3x3 identity matrix"""

id = np.identity(3)
print(id)

"""#### Use NumPy to generate a random number between 0 and 1



"""

ra = np.random.uniform(0,1)
print(ra)

"""#### Use NumPy to generate an array of 25 random numbers sampled from a standard normal distribution"""

em = np.random.standard_normal(25)
print(em)

"""#### Create the following matrix:"""

zz = np.arange(0.01,1.01,0.01)
print(zz)

"""#### Create an array of 20 linearly spaced points between 0 and 1:"""

li = np.linspace(0, 1, 20)
print(li)

"""## Numpy Indexing and Selection

Now you will be given a few matrices, and be asked to replicate the resulting matrix outputs:
"""

mat = np.arange(1,26).reshape(5,5)
mat

# WRITE CODE HERE THAT REPRODUCES THE OUTPUT OF THE CELL BELOW
# BE CAREFUL NOT TO RUN THE CELL BELOW, OTHERWISE YOU WON'T
# BE ABLE TO SEE THE OUTPUT ANY MORE
print(mat[2:,1:])



# WRITE CODE HERE THAT REPRODUCES THE OUTPUT OF THE CELL BELOW
# BE CAREFUL NOT TO RUN THE CELL BELOW, OTHERWISE YOU WON'T
# BE ABLE TO SEE THE OUTPUT ANY MORE
print(mat[3,-1])



# WRITE CODE HERE THAT REPRODUCES THE OUTPUT OF THE CELL BELOW
# BE CAREFUL NOT TO RUN THE CELL BELOW, OTHERWISE YOU WON'T
# BE ABLE TO SEE THE OUTPUT ANY MORE
mat31 = mat[:3,1]
print(mat31.reshape(3,1))



# WRITE CODE HERE THAT REPRODUCES THE OUTPUT OF THE CELL BELOW
# BE CAREFUL NOT TO RUN THE CELL BELOW, OTHERWISE YOU WON'T
# BE ABLE TO SEE THE OUTPUT ANY MORE
print(mat[-1,])



# WRITE CODE HERE THAT REPRODUCES THE OUTPUT OF THE CELL BELOW
# BE CAREFUL NOT TO RUN THE CELL BELOW, OTHERWISE YOU WON'T
# BE ABLE TO SEE THE OUTPUT ANY MORE
print(mat[3:,])



"""### Now do the following

#### Get the sum of all the values in mat
"""

print(np.sum(mat))

"""#### Get the standard deviation of the values in mat"""

print(np.std(mat))

"""#### Get the sum of all the columns in mat"""

sum  = mat.sum(axis=0)
print(sum)

"""# Great Job!"""